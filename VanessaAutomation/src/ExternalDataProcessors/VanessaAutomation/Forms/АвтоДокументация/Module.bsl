#Область ОписаниеПеременных

&НаКлиенте
Перем УправляемаяФорма;

//&НаКлиенте
//Перем ИмяФайлаЛогаИнструкцииHTML;
//
//&НаКлиенте
//Перем ИмяФайлаЛогаИнструкцииMarkdown;

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьСлужебныеПеременные(СтруктураПараметров) Экспорт
	УправляемаяФорма = СтруктураПараметров.УправляемаяФорма;
КонецПроцедуры 

&НаКлиенте
Процедура ПодготовитьСозданиеИнструкцииHTML(МассивСценариев, ИДСценария) Экспорт
		
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;

	Если МассивСценариев.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КаталогВыгрузкиИнструкцийHTML = УправляемаяФорма.ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML);

	// TODO: Переписать на стандартную проверку существование файла
	// ФайлПроверкаСуществования = Новый Файл(Объект.КаталогOutputИнструкцияHTML);
	// Если НЕ ФайлПроверкаСуществования.Существует() Тогда
	Если НЕ УправляемаяФорма.ФайлСуществуетКомандаСистемы(КаталогВыгрузкиИнструкцийHTML) Тогда 
		Стр = "Файл КаталогВыгрузкиИнструкцияHTML: " + КаталогВыгрузкиИнструкцийHTML + " не существует.";
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;	 
	
	Если Найти(Прав(КаталогВыгрузкиИнструкцийHTML, 1), "\/") > 0 Тогда
		КаталогВыгрузкиИнструкцийHTML = Сред(КаталогВыгрузкиИнструкцийHTML, СтрДлина(КаталогВыгрузкиИнструкцийHTML) - 1);
	КонецЕсли;	 
	
	Если ТекущаяФичаИнструкцииHTML <> МассивСценариев[ИДСценария].ИмяФичи Тогда
		Если Не ПустаяСтрока(ТекущаяФичаИнструкцииHTML) Тогда
			СоздатьФайлHTMLИнструкции();
		КонецЕсли;  
		ТекущаяФичаИнструкцииHTML = МассивСценариев[ИДСценария].ИмяФичи;
	Иначе
		Возврат;
	КонецЕсли;  
	
	ИмяФайлаЛогаИнструкцииHTML = СтрЗаменить(УправляемаяФорма.ДополнитьСлешВПуть(КаталогВыгрузкиИнструкцийHTML) + "InstrHTML_" + ТекущаяФичаИнструкцииHTML + "_" +  ПолучитьОтметкуВремениДляИмениФайла() + "_log.txt", Символы.НПП, "");
	
	ТД = Новый ТекстовыйДокумент;
	ЗаголовокФичи = ПрочитатьЗаголовокФичи(МассивСценариев[ИДСценария].ПолныйПутьКФиче);
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8);
	Для каждого Стр Из ЗаголовокФичи Цикл
		ТД.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ТД.ЗаписатьСтроку("--окончание заголовка--");
	ТД.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьСозданиеИнструкцииMarkdown(МассивСценариев, ИДСценария) Экспорт
		
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	
	
	Если МассивСценариев.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КаталогВыгрузкиИнструкцийMarkdown = УправляемаяФорма.ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийMarkdown);
	
	Если НЕ УправляемаяФорма.ФайлСуществуетКомандаСистемы(КаталогВыгрузкиИнструкцийMarkdown) Тогда 
		Стр = "Файл КаталогВыгрузкиИнструкцияMarkdown: " + КаталогВыгрузкиИнструкцийMarkdown + " не существует.";
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;	 
	
	Если Найти(Прав(КаталогВыгрузкиИнструкцийMarkdown, 1), "\/") > 0 Тогда
		КаталогВыгрузкиИнструкцийMarkdown = Сред(КаталогВыгрузкиИнструкцийMarkdown, СтрДлина(КаталогВыгрузкиИнструкцийMarkdown) - 1);
	КонецЕсли;	 
	
	Если ТекущаяФичаИнструкцииMarkdown <> МассивСценариев[ИДСценария].ИмяФичи Тогда
		Если ТекущаяФичаИнструкцииMarkdown <> "" Тогда
			СоздатьФайлMarkdownИнструкции();
		КонецЕсли;  
		ТекущаяФичаИнструкцииMarkdown = МассивСценариев[ИДСценария].ИмяФичи;
	Иначе
		Возврат;
	КонецЕсли;  
	
	ИмяФайлаЛогаИнструкцииMarkdown = СтрЗаменить(УправляемаяФорма.ДополнитьСлешВПуть(КаталогВыгрузкиИнструкцийMarkdown) + "InstrMarkdown_" + ТекущаяФичаИнструкцииMarkdown + "_" + ПолучитьОтметкуВремениДляИмениФайла() + "_log.txt", Символы.НПП, "");
	
	ЗаголовокФичи = ПрочитатьЗаголовокФичи(МассивСценариев[ИДСценария].ПолныйПутьКФиче);
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8);
	Для каждого Стр Из ЗаголовокФичи Цикл
		ТД.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ТД.ЗаписатьСтроку("--окончание заголовка--");
	ТД.Закрыть();
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлHTMLИнструкции() Экспорт
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаОкончанияЗаголовка = 0;
	ЗаголовокФичи = ПолучитьЗаголовокФичиИзЛогаИнструкции(ИмяФайлаЛогаИнструкцииHTML, СтрокаОкончанияЗаголовка);
	
	ТД = Новый ЧтениеТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8);
		
	МассивСценариев = Новый Массив;
	МассивШагов     = Неопределено;
	
	Ном = 0;
	Стр = ТД.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		
		Ном = Ном + 1;
		Если Ном <= СтрокаОкончанияЗаголовка Тогда
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;			
		КонецЕсли;
		
		Если Стр = "НачалоСценария" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов  = Новый Массив;
			ТекСтруктура.Вставить("Шаги", МассивШагов);
			МассивСценариев.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		ИначеЕсли Стр = "НачалоШага" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;	 
		
		Поз = Найти(Стр, "=");
		Если Поз = 0 Тогда
			ТекстСообщения = УправляемаяФорма.Локализовать("Странный параметр в логе инструкции HTML: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ИмяПараметра      = Лев(Стр, Поз - 1);
		ЗначениеПараметра = Сред(Стр, Поз + 1);
		
		ТекСтруктура.Вставить(ИмяПараметра, ЗначениеПараметра);
		Стр = ТД.ПрочитатьСтроку();
		
	КонецЦикла; 
	ТД.Закрыть();
	
	КаталогОбъектов = УправляемаяФорма.ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML);
	
	ИмяФайлаДляЗаписи = УправляемаяФорма.ДополнитьСлешВПуть(УправляемаяФорма.ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML))
	    + "Instr_" + УправляемаяФорма.УбратьВсеЗапрещенныеСимволыИзИмениФайла(ТекущаяФичаИнструкцииHTML) + ".HTML";
	
	CSSСтили = CSSСтили();
	
	Страница = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, КодировкаТекста.UTF8);
	Страница.ЗаписатьСтроку("<html>");
	//TODO: Если есть тег @noCSS строку со стилями записыват не нужно 
	Страница.ЗаписатьСтроку(CSSСтили);
	Страница.ЗаписатьСтроку("<body>");	
	Страница.ЗаписатьСтроку("<h3><p  style=""font-size:40px"">");
	Для каждого Стр Из ЗаголовокФичи Цикл
		Страница.ЗаписатьСтроку("<br>" + Стр);
	КонецЦикла;
	Страница.ЗаписатьСтроку("</p></h3>");
	
	ИДСкриншота  = 0;
	Для каждого Сценарий Из МассивСценариев Цикл
		Страница.ЗаписатьСтроку("<h1><p align=""center"" style=""font-size:35px"">" + Сценарий.ИмяСценария + "</p></h1>");		
		ИмяФичи = Сценарий.ИмяФичи;
		ИмяФичи = УправляемаяФорма.УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФичи);
		ИмяФичи = СтрЗаменить(ИмяФичи, " ", "_");
		ИмяСценария = СтрЗаменить(Сценарий.ИмяСценария, " ", "_");
		ИмяСценария = УправляемаяФорма.УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСценария);
		
		КаталогФичи = УправляемаяФорма.ДополнитьСлешВПуть(КаталогОбъектов) + ИмяФичи;
		ФайлКаталогФичи = Новый Файл(КаталогФичи);
		Если НЕ УправляемаяФорма.ФайлСуществуетКомандаСистемы(ФайлКаталогФичи.ПолноеИмя) Тогда
			УправляемаяФорма.СоздатьКаталогКомандаСистемы(КаталогФичи);
		КонецЕсли;  
		
		МассивШагов = Сценарий.Шаги;
		НомШага = 0;
		Для каждого Шаг Из МассивШагов Цикл
			ДополнитьСвойстваШага(МассивСценариев, Шаг, Сценарий, Шаг.ИДШага);
		КонецЦикла;	
		
		Для каждого Шаг Из МассивШагов Цикл
			ОбработатьСлужебныеДирективыАвтоинструкций(Шаг,Сценарий);
			
			ИДСкриншота = ИДСкриншота + 1;
			
			Если Шаг.ИгнорироватьШагВАвтоинструкции Тогда
				УправляемаяФорма.УдалитьФайлыКомандаСистемы(Шаг.Скриншот);
				Продолжить;
			КонецЕсли;	 
			
			НомШага = НомШага + 1;
			Страница.ЗаписатьСтроку("");
			
			ТекстШага = Шаг.Имя;
			Если ЗначениеЗаполнено(Шаг.ТекстИнструкция) Тогда
				ТекстШага = Шаг.ТекстИнструкция;
			КонецЕсли;	 
			
			СтрокаШага = СтрЗаменить(ТекстШага, "\n", Символы.ПС);
			МассивСтрок = УправляемаяФорма.РазложитьСтрокуВМассивПодстрок(СтрокаШага, Символы.ПС);
			Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
				Стр = МассивСтрок[Ккк];
				Если Ккк = 0 Тогда
					Страница.ЗаписатьСтроку("<p align=""left"" style=""font-size:30px""><b>" + УправляемаяФорма.ПолучитьФорматированныйНомер(НомШага, 3) + "</b>. " + Стр + "</p>");
				Иначе
					ЕстьВертЧерта = Ложь;
					Если Найти(Стр, "|") > 0 Тогда
						ЕстьВертЧерта = Истина;
					КонецЕсли;	 
					
					Если ЕстьВертЧерта Тогда
						Страница.ЗаписатьСтроку("<p align=""left"" style=""font-size:30px""><pre><font size=""5"" face=""Lucida Console"">" + Стр + "</font></pre></p>");
					Иначе	
						Страница.ЗаписатьСтроку("<p align=""left"" style=""font-size:30px"">" + Стр + "</p>");
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;
			ФайлСкриншота = Новый Файл(Шаг.Скриншот);
			НовоеИмяФайлаСкриншота = СтрЗаменить(ИмяФичи + "_" + ИДСкриншота + "_" + Лев(ИмяСценария, 30) + "_" + УправляемаяФорма.ПолучитьФорматированныйНомер(НомШага, 3) + ФайлСкриншота.Расширение, " ", "_");
			ИмяФайлаСкриншотаВКаталогеФичи = ФайлСкриншота.Путь + СтрЗаменить(УправляемаяФорма.ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			ФайлСкриншота = Неопределено;
			
			ПроцедураПереместитьФайл(Шаг.Скриншот, ИмяФайлаСкриншотаВКаталогеФичи);
			
			СтрСкриншотаДляHTML = СтрЗаменить(УправляемаяФорма.ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			Страница.ЗаписатьСтроку("<img src=" + СтрЗаменить(СтрСкриншотаДляHTML, "\", "/") + ">");
		КонецЦикла;
	КонецЦикла;
	
	Страница.ЗаписатьСтроку("</body>");
	Страница.ЗаписатьСтроку("/<html>");
	
	ТекстСообщения = УправляемаяФорма.Локализовать("Записываю %1");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаДляЗаписи);
	УправляемаяФорма.СообщитьПользователю(ТекстСообщения);
	Страница.Закрыть();
 
	УправляемаяФорма.УдалитьФайлыКомандаСистемы(ИмяФайлаЛогаИнструкцииHTML);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлMarkdownИнструкции() Экспорт
	
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаОкончанияЗаголовка = 0;
	ЗаголовокФичи            = ПолучитьЗаголовокФичиИзЛогаИнструкции(ИмяФайлаЛогаИнструкцииMarkdown, СтрокаОкончанияЗаголовка);
	
	ТД = Новый ЧтениеТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8);

	МассивСценариев = Новый Массив;
	МассивШагов     = Неопределено;
	Ном = 0;
	Стр = ТД.ПрочитатьСтроку();	
	Пока Стр <> Неопределено Цикл
		Ном = Ном + 1;
		Если Ном <= СтрокаОкончанияЗаголовка Тогда
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;			
		КонецЕсли; 
			
		Если Стр = "НачалоСценария" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов  = Новый Массив;
			
			ТекСтруктура.Вставить("Шаги", МассивШагов);
			
			МассивСценариев.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		ИначеЕсли Стр = "НачалоШага" Тогда
			ТекСтруктура = Новый Структура;
			
			МассивШагов.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;	 
		
		Поз = Найти(Стр, "=");
		Если Поз = 0 Тогда
			ТекстСообщения = УправляемаяФорма.Локализовать("Странный параметр в логе инструкции Markdown: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ИмяПараметра      = Лев(Стр, Поз - 1);
		ЗначениеПараметра = Сред(Стр, Поз + 1);
		
		ТекСтруктура.Вставить(ИмяПараметра, ЗначениеПараметра);
		Стр = ТД.ПрочитатьСтроку();
			
	КонецЦикла; 
	ТД.Закрыть();
	
	КаталогОбъектов = Объект.КаталогВыгрузкиИнструкцийMarkdown;
		
	ИмяФайлаДляЗаписи = Объект.КаталогВыгрузкиИнструкцийMarkdown + "/"
	    + УправляемаяФорма.УбратьВсеЗапрещенныеСимволыИзИмениФайла(ТекущаяФичаИнструкцииMarkdown) + ".MD";
	ЗТ = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, "Windows-1251", , Ложь); 
	ЗТ.Закрыть();//убираю BOM, специально для ATOM
	
	Страница = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, "UTF-8", , Истина); 
	//записываю заголовок
	Для каждого Стр Из ЗаголовокФичи Цикл
		Стр = СокрЛП(Стр);
		Если Найти(Стр, "Функционал:") > 0 Тогда
			Стр = СтрЗаменить(Стр, "Функционал:", "**Функционал:**");
		ИначеЕсли НРег(Лев(Стр, 3)) = "как" Тогда
			Стр =  "> **Как**" + Сред(Стр, 4);
			
		ИначеЕсли НРег(Лев(Стр, 4)) = "хочу" Тогда
			Стр =  "> **Хочу**" + Сред(Стр, 5);
		ИначеЕсли НРег(Лев(Стр, 6)) = "я хочу" Тогда
			Стр =  "> **Я хочу**" + Сред(Стр, 7);
		ИначеЕсли НРег(Лев(Стр, 5)) = "чтобы" Тогда
			Стр =  "> **Чтобы**" + Сред(Стр, 6);
		Иначе
			Стр = " > " + Стр;
		КонецЕсли;	 
		
		Страница.ЗаписатьСтроку(Стр);
		Страница.ЗаписатьСтроку("");
	КонецЦикла;
	
	ИДСкриншота  = 0;
	ИДСценария   = 0;
	Для каждого Сценарий Из МассивСценариев Цикл
		ИДСценария = ИДСценария + 1;
		Если ИДСценария > 1 Тогда
			Страница.ЗаписатьСтроку("");
		КонецЕсли;	 
		Страница.ЗаписатьСтроку("");
		Страница.ЗаписатьСтроку("**Сценарий:** " + Сценарий.ИмяСценария);
		
		ИмяФичи = Сценарий.ИмяФичи;
		ИмяФичи = УправляемаяФорма.УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФичи);
		ИмяФичи = СтрЗаменить(ИмяФичи, " ", "_");
		
		ИмяСценария = Сценарий.ИмяСценария;
		ИмяСценария = УправляемаяФорма.УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСценария);
		ИмяСценария = СтрЗаменить(ИмяСценария, " ", "_");
		
		КаталогФичи = УправляемаяФорма.ДополнитьСлешВПуть(КаталогОбъектов) + ИмяФичи;
		
		ФайлКаталогФичи = Новый Файл(КаталогФичи);
		Если НЕ УправляемаяФорма.ФайлСуществуетКомандаСистемы(ФайлКаталогФичи.ПолноеИмя) Тогда
			УправляемаяФорма.СоздатьКаталогКомандаСистемы(КаталогФичи);
		КонецЕсли;  
		
		МассивШагов = Сценарий.Шаги;
		НомШага = 0;
		Для каждого Шаг Из МассивШагов Цикл
			ДополнитьСвойстваШага(МассивСценариев, Шаг, Сценарий, Шаг.ИДШага);
		КонецЦикла;	
		
		Для каждого Шаг Из МассивШагов Цикл
			ОбработатьСлужебныеДирективыАвтоинструкций(Шаг,Сценарий);
			
			ИДСкриншота = ИДСкриншота + 1;
			
			Если Шаг.ИгнорироватьШагВАвтоинструкции Тогда
				УправляемаяФорма.УдалитьФайлыКомандаСистемы(Шаг.Скриншот);
				Продолжить;
			КонецЕсли;	 
			
			НомШага = НомШага + 1;
			Страница.ЗаписатьСтроку("");
			
			ТекстШага = Шаг.Имя;
			Если ЗначениеЗаполнено(Шаг.ТекстИнструкция) Тогда
				ТекстШага = Шаг.ТекстИнструкция;
			КонецЕсли;	 
			
			СтрокаШага = СтрЗаменить(ТекстШага, "\n", Символы.ПС);
			МассивСтрок = УправляемаяФорма.РазложитьСтрокуВМассивПодстрок(СтрокаШага, Символы.ПС);
			Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
				Стр = МассивСтрок[Ккк];
				Если Ккк = 0 Тогда
					Страница.ЗаписатьСтроку("	" + УправляемаяФорма.ПолучитьФорматированныйНомер(НомШага, 3) + ". " + Стр);
				Иначе
					ЕстьВертЧерта = Ложь;
					Если Найти(Стр, "|") > 0 Тогда
						ЕстьВертЧерта = Истина;
					КонецЕсли;	 
										
					Если ЕстьВертЧерта Тогда
						Страница.ЗаписатьСтроку("	" + Стр);
					Иначе	
						Страница.ЗаписатьСтроку("	" + Стр);
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;
			ФайлСкриншота = Новый Файл(Шаг.Скриншот);
			НовоеИмяФайлаСкриншота = СтрЗаменить(ИмяФичи + "_" + ИДСкриншота + "_" + Лев(ИмяСценария, 30) + "_" + УправляемаяФорма.ПолучитьФорматированныйНомер(НомШага, 3) + ФайлСкриншота.Расширение, " ", "_");
			ИмяФайлаСкриншотаВКаталогеФичи = ФайлСкриншота.Путь + СтрЗаменить(УправляемаяФорма.ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			ФайлСкриншота = Неопределено;
			
			ПроцедураПереместитьФайл(Шаг.Скриншот, ИмяФайлаСкриншотаВКаталогеФичи);
			
			СтрСкриншотаДляMarkdown = СтрЗаменить(УправляемаяФорма.ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			Страница.ЗаписатьСтроку("![](" + СтрЗаменить(СтрСкриншотаДляMarkdown, "\", "/") + ")");
		КонецЦикла;
	КонецЦикла;
	
	ТекстСообщения = УправляемаяФорма.Локализовать("Записываю %1");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаДляЗаписи);
	УправляемаяФорма.СообщитьПользователю(ТекстСообщения);
	Страница.Закрыть();

	УправляемаяФорма.УдалитьФайлыКомандаСистемы(ИмяФайлаЛогаИнструкцииMarkdown);

КонецПроцедуры

// TODO: задовеная с ДобавитьВЛогИнструкцииMarkdownНачалоСценария
&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLНачалоСценария(МассивСценариев, ИДСценария) Экспорт

	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;

	СтруктураСценария = МассивСценариев[ИДСценария];

	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8, , Истина);

	ТД.ЗаписатьСтроку("НачалоСценария");
	ТД.ЗаписатьСтроку("ИмяСценария=" + СтруктураСценария.Имя);
	ТД.ЗаписатьСтроку("ИдСценария=" + Формат(ИДСценария, "ЧГ=; ЧН=0"));
	ТД.ЗаписатьСтроку("ИмяФичи=" + СтруктураСценария.ИмяФичи);
	ТД.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииMarkdownНачалоСценария(МассивСценариев, ИДСценария) Экспорт

	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;

	СтруктураСценария = МассивСценариев[ИДСценария];
 
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8, , Истина);

	ТД.ЗаписатьСтроку("НачалоСценария");
	ТД.ЗаписатьСтроку("ИмяСценария=" + СтруктураСценария.Имя);
	ТД.ЗаписатьСтроку("ИдСценария=" + Формат(ИДСценария, "ЧГ=; ЧН=0"));
	ТД.ЗаписатьСтроку("ИмяФичи=" + СтруктураСценария.ИмяФичи);
	ТД.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLВыполненияШага(МассивСценариевДляВыполнения, СтруткураШага = Неопределено, ИДСценария, ИДШага, СкриншотСделанВСценарии) Экспорт
	
	Если СкриншотСделанВСценарии Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;  
	
	КаталогВыгрузкиИнструкцийHTML = УправляемаяФорма.ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML);
	Если СтруткураШага = Неопределено Тогда
		ТекИД_ВыполненногоШагаВМассиве = ИДШага;
		Шаги                           = МассивСценариевДляВыполнения[ИДСценария].Шаги;
		СтруткураШага                  = Шаги[ИДШага];
	КонецЕсли;	 
	
	ИмяФайлаСкриншота = СоздатьИмяФайлаДляСкриншота(КаталогВыгрузкиИнструкцийHTML);
	УправляемаяФорма.СделатьСкриншот(ИмяФайлаСкриншота);
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8, , Истина);
	ТД.ЗаписатьСтроку("НачалоШага");
	СтрокаШага = СтруткураШага.Имя;
	Если СтруткураШага.ШагСПараметрамиВТаблице = Истина Тогда
		Для каждого СтрПараметрыТаблицы Из СтруткураШага.ПараметрыТаблицы Цикл
			СтрокаШага = СтрокаШага + "\n" + СтрПараметрыТаблицы;
		КонецЦикла;
	КонецЕсли;	 
	
	ТД.ЗаписатьСтроку("ИДШага=" + Формат(ИДШага, "ЧГ=; ЧН=0"));
	ТД.ЗаписатьСтроку("Скриншот=" + ИмяФайлаСкриншота);
	ТД.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииMarkdownВыполненияШага(МассивСценариев, ИдСценария, ИдШага, СкриншотСделанВСценарии) Экспорт
	
	Если СкриншотСделанВСценарии Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;  
	
	СтруткураШага = МассивСценариев[ИдСценария];
	
	Если СтруткураШага = Неопределено Тогда
//		ТекИД_ВыполненногоШагаВМассиве = ИДШага;
		Шаги                           = МассивСценариев[ИДСценария].Шаги;
		СтруткураШага                  = Шаги[ИДШага];
	КонецЕсли;	 
	
	ИмяФайлаСкриншота = СоздатьИмяФайлаДляСкриншота(Объект.КаталогВыгрузкиИнструкцийMarkdown);
	УправляемаяФорма.СделатьСкриншот(ИмяФайлаСкриншота);
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8, , Истина);
	
	ТД.ЗаписатьСтроку("НачалоШага");
	
	СтрокаШага = СтруткураШага.Имя;
	Если СтруткураШага.ШагСПараметрамиВТаблице = Истина Тогда
		Для каждого СтрПараметрыТаблицы Из СтруткураШага.ПараметрыТаблицы Цикл
			СтрокаШага = СтрокаШага + "\n" + СтрПараметрыТаблицы;
		КонецЦикла;
	КонецЕсли;	 
	
	ТД.ЗаписатьСтроку("ИДШага=" + Формат(ИДШага, "ЧГ=; ЧН=0"));
	ТД.ЗаписатьСтроку("Скриншот=" + ИмяФайлаСкриншота);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьИзФичиПараметрыСборкиВидео(МассивСценариев) Экспорт
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого Сценарий Из МассивСценариев Цикл
		МассивФичи = ЗагрузитьФайлВМассив(Сценарий.ПолныйПутьКФиче);
		
		НайтиПризнакЧтоСценарийНадоИгнорировать(МассивФичи,Сценарий);
		НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивФичи,Сценарий);
		
		Шаги       = Сценарий.Шаги;
		Для Каждого Шаг Из Шаги Цикл
			Если Шаг.ЭтоШагКонтекста Тогда
				Продолжить;
			КонецЕсли;	 
			
			НайтиГруппыШаговКоторыеНадоОбрабатыватьКакОдинШаг(МассивФичи,Шаг,Сценарий);
			НайтиГруппыШаговКоторыеНадоИгнорировать(МассивФичи,Шаг,Сценарий);
			
			Если НЕ Шаг.ЭтоШагПодсценария Тогда
				НайтиШагиКоторыеНеНадоМасштабировать(МассивФичи,Шаг,Сценарий);
				НайтиШагиКоторыеНадоИгнорировать(МассивФичи,Шаг,Сценарий);
			КонецЕсли;	 
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПрочитатьЗаголовокФичи(ИмяФайла)
	Массив = Новый Массив;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если СокрЛП(Стр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СокрЛП(Стр);
		
		Если Лев(Стр, 1) = "@" Тогда
			Продолжить;
		КонецЕсли;	 
		Если Лев(Стр, 1) = "#" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Найти(НРег(Стр), "сценарий:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), "контекст:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), "scenario:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), "background:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		
		Массив.Добавить(Стр);
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Функция СоздатьИмяФайлаДляСкриншота(Каталог)
	Возврат УправляемаяФорма.ДополнитьСлешВПуть(Каталог) + "ScreenShot_" + ПолучитьОтметкуВремениДляИмениФайла() + ".png";
КонецФункции

&НаКлиенте
Процедура ОбработатьСлужебныеДирективыАвтоинструкций(Шаг,Сценарий)
	ИдСтроки = Шаг.ИдСтроки;
	СтрокаДереваШаг = Неопределено;
	НайтиСтрокуДереваПоИдСтроки(ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), СтрокаДереваШаг);
	ПроставитьСвойстваШагаСУчетомСвойствГруппы(Шаг,СтрокаДереваШаг,Сценарий);
	
	Для Каждого КомментарийШага Из Шаг.МассивКомментариевШага Цикл
		Директива = "#[autodoc.text]";
		Поз = Найти(НРег(КомментарийШага),Директива); 
		Если Поз > 0 Тогда
			СлужебнаяСтрока = СокрЛП(Сред(КомментарийШага,Поз + СтрДлина(Директива)));
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ОбработкаПараметровШага",Истина);
			ПараметрыОбработки.Вставить("ВычислитьВыражения",Истина);
			ПараметрыОбработки.Вставить("Шаг",Шаг);
			ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
			
			Шаг.Вставить("ТекстИнструкция",СлужебнаяСтрока);
		КонецЕсли;	 
		
		Директива = "#[autodoc.ignorestep]";
		Поз = Найти(НРег(КомментарийШага),Директива); 
		Если Поз > 0 Тогда
			СлужебнаяСтрока = СокрЛП(Сред(КомментарийШага,Поз + СтрДлина(Директива)));
			Шаг.Вставить("ИгнорироватьШагВАвтоинструкции",Истина);
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьЗаголовокФичиИзЛогаИнструкции(ИмяФайла, СтрокаОкончанияЗаголовка)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	ЗаголовокФичи = Новый Массив;
	Ном = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
		Ном = Ном + 1;
		
		Если Стр = "--окончание заголовка--" Тогда
			СтрокаОкончанияЗаголовка = Ном;
			Прервать;
		КонецЕсли;	 
		
		ЗаголовокФичи.Добавить(Стр);
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат ЗаголовокФичи;
КонецФункции
&НаКлиенте
Процедура СтрокаСтиля(Стиль, Стили)

	Стили.ДобавитьСтроку(Стиль);
	
КонецПроцедуры

#Область РаботаСШагами

&НаКлиенте
Процедура НайтиГруппыШаговКоторыеНадоОбрабатыватьКакОдинШаг(МассивТекстФичи,Шаг,Сценарий)
	ИДСтрокиШага = Шаг.СтрокаШага;
	СтрокаШага   = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];
	
	РодительШага = ПолучитьРодителяВерхнегоУровняДляСтрокиШага(СтрокаШага);
	
	Если РодительШага = Неопределено Тогда
		ТекстСообщения = УправляемаяФорма.Локализовать("Не получилось определить родителя у шага <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаШага.Имя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если (РодительШага.Тип <> "Область") и (РодительШага.Тип <> "ШагСценарий") Тогда //только эти шаги идут как видеовставки
		Возврат;
	КонецЕсли;	 
	
	ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
	Индекс           = ЭлементыРодителя.Индекс(СтрокаШага);
	Если Индекс = -1 Тогда
		//надо проверить, что это самый первый шаг в группе первого уровня
		Индекс = ЭтотШагСамыйПервыйВГруппеПервогоУровня(СтрокаШага,РодительШага);
	КонецЕсли;	 
	Если Индекс = 0 Тогда
		//значит этот шаг первый в группе
		
		Нашли = Ложь;
		СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.groupsteps]",РодительШага.НомерСтрокиВФиче,Нашли);
		
		Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
			//Значит не указан новый текст группы. Оставим прежний.
			СлужебнаяСтрока = РодительШага.Имя;
		КонецЕсли;	 
		
		НашлиДирективуНеМасштабироватьШаг = Ложь;
		НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.donotscale]",РодительШага.НомерСтрокиВФиче,НашлиДирективуНеМасштабироватьШаг);
		
		Если Нашли ИЛИ Объект.ЗаписьВидеоГруппаШаговКакШаг Тогда
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ВычислитьВыражения",Истина);
			ПараметрыОбработки.Вставить("ОбработатьГруппыШаговКакОдинШаг",Истина);
			ПараметрыОбработки.Вставить("Шаг",Шаг);
			ПараметрыОбработки.Вставить("Сценарий",Сценарий);
			ПараметрыОбработки.Вставить("СтрокаДереваГруппа",РодительШага);
			ПараметрыОбработки.Вставить("МасштабироватьВВидео",Не НашлиДирективуНеМасштабироватьШаг);
			ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
		КонецЕсли;	 
	КонецЕсли;	 
	
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиГруппыШаговКоторыеНадоИгнорировать(МассивТекстФичи,Шаг,Сценарий)
	ИДСтрокиШага = Шаг.СтрокаШага;
	СтрокаШага   = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];
	
	РодительШага = СтрокаШага.ПолучитьРодителя();
	Если (РодительШага.Тип <> "Область") и (РодительШага.Тип <> "ШагСценарий") Тогда //только эти шаги идут как видеовставки
		Возврат;
	КонецЕсли;	 
	
	ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
	Индекс           = ЭлементыРодителя.Индекс(СтрокаШага);
	Если Индекс = 0 Тогда
		//значит этот шаг первый в группе
		
		Нашли = Ложь;
		СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.ignorestep]",РодительШага.НомерСтрокиВФиче,Нашли);
		Если НЕ Нашли Тогда
			Возврат;
		КонецЕсли;	 
		
		Если Не Сценарий.Свойство("ГруппыКоторыеНадоИгнорировать") Тогда
			Сценарий.Вставить("ГруппыКоторыеНадоИгнорировать",Новый Массив);
		КонецЕсли;	 
		
		Сценарий.ГруппыКоторыеНадоИгнорировать.Добавить(РодительШага.ИдСтроки);
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции",Истина);
		ПараметрыОбработки.Вставить("Шаг",Шаг);
		ПараметрыОбработки.Вставить("Сценарий",Сценарий);
		ПараметрыОбработки.Вставить("СтрокаДереваГруппа",РодительШага);
		ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиШагиКоторыеНеНадоМасштабировать(МассивТекстФичи,Шаг,Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.donotscale]",Шаг.НомерСтрокиВФиче,Нашли);
	Если Не Нашли Тогда
		Возврат;
	КонецЕсли;	
	
	Шаг.Вставить("МасштабироватьВВидео",Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НайтиШагиКоторыеНадоИгнорировать(МассивТекстФичи,Шаг,Сценарий)
	
	Нашли = Ложь;
	
	НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.ignorestep]",Шаг.НомерСтрокиВФиче,Нашли);
	
	Если Не Нашли Тогда
		Возврат;
	КонецЕсли;	
	
	Шаг.Вставить("ИгнорироватьШагВАвтоинструкции",Истина);

КонецПроцедуры

&НаКлиенте
Процедура НайтиПризнакЧтоСценарийНадоИгнорировать(МассивТекстФичи,Сценарий)

	Нашли = Ложь;

	НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.ignorescenario]", Сценарий.НомерСтрокиВФиче, Нашли);
	
	Если НЕ Нашли Тогда
		Возврат;
	КонецЕсли;	 
	
	Сценарий.Вставить("ИгнорироватьШагВАвтоинструкции",Истина);
	
	ПараметрыУстановки = Новый Структура;
	ПараметрыУстановки.Вставить("Сценарий",Сценарий);
	
	ДопПараметры = Новый Структура;	
	ДопПараметры.Вставить("Уровень",0);
	
	ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(МассивСтрокДереваДанныеФормы[Сценарий.СтрокаДерева],ПараметрыУстановки,ДопПараметры);

КонецПроцедуры

&НаКлиенте
Процедура НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивТекстФичи,
		Сценарий)

	Если Объект.ЗаписьВидеоОтключитьСлайдСценария Тогда
		Сценарий.Вставить("ИгнорироватьСлайдСценарияВАвтоинструкции", Истина);
		Возврат;
	КонецЕсли;

	СтрокаНайдена = Ложь;

	НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.ignore.scenarioslide]", Сценарий.НомерСтрокиВФиче, СтрокаНайдена);

	Если НЕ СтрокаНайдена Тогда
		Возврат;
	КонецЕсли;

	Сценарий.Вставить("ИгнорироватьСлайдСценарияВАвтоинструкции", Истина);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьРодителяВерхнегоУровняДляСтрокиШага(СтрокаШага)
	НайденнаяСтрока = Неопределено;
	ТекРодитель = СтрокаШага;
	Пока Истина Цикл
		РодительШага = ТекРодитель.ПолучитьРодителя();
		Если РодительШага = Неопределено Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = "Сценарий" Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = РодительШага;
			КонецЕсли;

			Прервать;
		КонецЕсли;

		ТекРодитель = РодительШага;
		НайденнаяСтрока = РодительШага;
	КонецЦикла;

	Возврат НайденнаяСтрока;
КонецФункции	 

&НаКлиенте
Функция ПервыйЭлементРодителяИсключаяСтрокиТаблицыGherkin(ЭлементыРодителя)
	Для Каждого Элем Из ЭлементыРодителя Цикл
		Если Элем.СтрокаПараметровШагаВВидеТаблицы Тогда
			Продолжить;
		КонецЕсли;
		Возврат Элем;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции	  

&НаКлиенте
Функция ЭтотШагСамыйПервыйВГруппеПервогоУровня(СтрокаШага, РодительШага)

	ТекРодитель = СтрокаШага.ПолучитьРодителя();
	ТекСтрокаШага = СтрокаШага;

	Пока Истина Цикл
		ЭлементыРодителя = ТекРодитель.ПолучитьЭлементы();
		ПервыйЭлементРодителя = ПервыйЭлементРодителяИсключаяСтрокиТаблицыGherkin(ЭлементыРодителя);
		Если ПервыйЭлементРодителя = Неопределено Тогда
			ТекстСообщения = УправляемаяФорма.Локализовать("Не получилось определить позицию шага <%1> в группе шагов <%2>.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаШага.Имя);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТекРодитель.Имя);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		Если ЭлементыРодителя.Индекс(ТекСтрокаШага) <> ЭлементыРодителя.Индекс(ПервыйЭлементРодителя) Тогда
			Возврат -1;
		КонецЕсли;

		ТекСтрокаШага = ТекРодитель;
		ТекРодитель = ТекРодитель.ПолучитьРодителя();

		Если ТекРодитель = РодительШага Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат 0;

КонецФункции	 

&НаКлиенте
Процедура ДополнитьСвойстваШага(МассивСценариев, Шаг, Сценарий, ИДШага)

	СценарийИзДерева = МассивСценариев[Число(Сценарий.ИдСценария)];
	ШагИзДерева = СценарийИзДерева.Шаги[Число(Шаг.ИдШага)];

	Для Каждого СвойствоШага Из ШагИзДерева Цикл
		Шаг.Вставить(СвойствоШага.Ключ, СвойствоШага.Значение);
	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Процедура ПроставитьСвойстваШагаСУчетомСвойствГруппы(Шаг, СтрокаДереваШаг, Сценарий)
	
	ШагНадоИгнорировать = Ложь;
	ТекСтрока = СтрокаДереваШаг;
	Пока Истина Цикл
		РодительШага = ТекСтрока.ПолучитьРодителя();
		ЭлементыРодителя = РодительШага.ПолучитьЭлементы();

		Если РодительШага = Неопределено Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = "Сценарий" Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = "Область" Тогда
			Если ТипЗнч(РодительШага.ПроизвольныеЗначения) = Тип("Структура") Тогда
				Для Каждого Комментарий Из РодительШага.ПроизвольныеЗначения.МассивКомментариевШага Цикл
					Если Найти(НРег(Комментарий), "#[autodoc.groupsteps]") > 0 Тогда

						СлужебнаяСтрока = СокрЛП(РодительШага.Имя);
						ПромСтрока = Сред(СокрЛП(Комментарий), 22);
						Если ЗначениеЗаполнено(ПромСтрока) Тогда
							СлужебнаяСтрока = ПромСтрока;
						КонецЕсли;

						Индекс = ЭлементыРодителя.Индекс(СтрокаДереваШаг);
						Если Индекс <> (ЭлементыРодителя.Количество() - 1) Тогда
						//вызываем проверку только для одного шага
							ШагНадоИгнорировать = Истина;
							Прервать;
						КонецЕсли;

						ПараметрыОбработки = Новый Структура;
						ПараметрыОбработки.Вставить("ВычислитьВыражения", Истина);
						ПараметрыОбработки.Вставить("ОбработатьГруппыШаговКакОдинШаг", Истина);
						ПараметрыОбработки.Вставить("Шаг", Шаг);
						ПараметрыОбработки.Вставить("Сценарий", Сценарий);
						ПараметрыОбработки.Вставить("СтрокаДереваГруппа", РодительШага);
						ПараметрыОбработки.Вставить("МасштабироватьВВидео", Ложь);

						ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, ПараметрыОбработки);

						Шаг.Вставить("ТекстИнструкция", СокрЛП(СлужебнаяСтрока));
					ИначеЕсли Найти(НРег(Комментарий), "#[autodoc.ignorestep]") > 0 Тогда
						ШагНадоИгнорировать = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		ТекСтрока = РодительШага;
	КонецЦикла;

	Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", ШагНадоИгнорировать);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьТекстШагаИзТекстаФичиЕслиОнТамЗадан(Текст, Шаг, Сценарий) Экспорт

	МассивТекстФичи = Сценарий.МассивТекстФичи;

	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.text]", Шаг.НомерСтрокиВФиче);
	Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОбработкаПараметровШага", Истина);
	ПараметрыОбработки.Вставить("ВычислитьВыражения", Истина);
	ПараметрыОбработки.Вставить("Шаг", Шаг);
	ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, ПараметрыОбработки);

	Текст = СлужебнаяСтрока;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,Параметры)
	
	ПредставлениеКвадратнаяСкобкаЛевая  = "__&КвадратнаяСкобкаЛевая__";
	ПредставлениеКвадратнаяСкобкаПравая = "__&КвадратнаяСкобкаПравая__";
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,"\[",ПредставлениеКвадратнаяСкобкаЛевая);
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,"\]",ПредставлениеКвадратнаяСкобкаПравая);
	
	Если Параметры.Свойство("ОбработкаПараметровШага") Тогда
		Если Параметры.ОбработкаПараметровШага Тогда
			Для Ккк = 1 По Параметры.Шаг.ЗначенияПараметров.Количество() Цикл
				СтрокаЗамены = "%" + Формат(Ккк, "ЧГ=; ЧН=0");
				СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,СтрокаЗамены,Параметры.Шаг.ЗначенияПараметров[Ккк-1].Значение.Значение);
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Параметры.Свойство("ВычислитьВыражения") Тогда
		Если Параметры.ВычислитьВыражения Тогда
			ВычислитьПараметрыВнутриСтроки(СлужебнаяСтрока);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если (Параметры.Свойство("ОбработатьГруппыШаговКакОдинШаг") И Параметры.ОбработатьГруппыШаговКакОдинШаг)
		  ИЛИ Объект.ЗаписьВидеоГруппаШаговКакШаг Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Уровень",0);
		ДопПараметры.Вставить("НашлиПервыйШаг",Ложь);
		ДопПараметры.Вставить("ПоследнийШаг",Ложь);
		ДопПараметры.Вставить("ВременныйШаг",Неопределено);
		ДопПараметры.Вставить("ТекстШагаГруппы",СлужебнаяСтрока);
		ДопПараметры.Вставить("МасштабироватьВВидео",Ложь);
		Если Параметры.Свойство("МасштабироватьВВидео") Тогда
			ДопПараметры.Вставить("МасштабироватьВВидео",Параметры.МасштабироватьВВидео);
		КонецЕсли;	 
		ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(Параметры.СтрокаДереваГруппа,Параметры,ДопПараметры);
	КонецЕсли;	 
	
	Если Параметры.Свойство("ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции") Тогда
		Если Параметры.ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Уровень",0);
			ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(Параметры.СтрокаДереваГруппа,Параметры,ДопПараметры);
		КонецЕсли;	 
	КонецЕсли;	 
	
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,ПредставлениеКвадратнаяСкобкаЛевая,"[");	
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,ПредставлениеКвадратнаяСкобкаПравая,"]");
		
КонецПроцедуры

&НаКлиенте
Функция НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, СтрокаПоиска, НомерСтрокиВФиче, Нашли = Ложь)
	
	Если НомерСтрокиВФиче = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТекИдМассива = НомерСтрокиВФиче - 1 - 1;
	Пока Истина Цикл
		Если ТекИдМассива < 0 Тогда
			Прервать;
		КонецЕсли;

		Стр = СокрЛП(МассивТекстФичи[ТекИдМассива]);

		Если ПустаяСтрока(Стр) Тогда
			ТекИдМассива = ТекИдМассива - 1;
			Продолжить;
		КонецЕсли;

		Если Лев(Стр, 1) <> "#" Тогда
			Прервать;
		КонецЕсли;

		Стр = Сред(Стр, 2);

		Если Лев(НРег(Стр), СтрДлина(СтрокаПоиска)) <> НРег(СтрокаПоиска) Тогда
			ТекИдМассива = ТекИдМассива - 1;
			Продолжить;
		КонецЕсли;

		//значит нашли нужную строку
		Стр = СокрЛП(Сред(Стр, СтрДлина(СтрокаПоиска) + 1));
		Нашли = Истина;

		Возврат Стр;
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВычислитьПараметрыВнутриСтроки(СлужебнаяСтрока)

	Стр = "";

	НашлиСтрокуДляВычисления = Ложь;
	СтрокаВыражения = "";

	Для Ккк = 1 По СтрДлина(СлужебнаяСтрока) Цикл
		Символ = Сред(СлужебнаяСтрока, Ккк, 1);
		Если Символ = "[" Тогда
			НашлиСтрокуДляВычисления = Истина;
			Продолжить;
		КонецЕсли;

		Если Символ = "]" Тогда
			НашлиСтрокуДляВычисления = Ложь;
			РезультатВыражения = Вычислить(СтрокаВыражения);
			Стр = Стр + РезультатВыражения;
			СтрокаВыражения = "";
			Продолжить;
		КонецЕсли;

		Если НашлиСтрокуДляВычисления Тогда
			СтрокаВыражения = СтрокаВыражения + Символ;
		Иначе
			Стр = Стр + Символ;
		КонецЕсли;
	КонецЦикла;

	СлужебнаяСтрока = Стр;

КонецПроцедуры

&НаКлиенте
Процедура ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(СтрокаДереваГруппа, Параметры, ДопПараметры)

	ЭлементыГруппы = СтрокаДереваГруппа.ПолучитьЭлементы();

	Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
		Если ЭлементГруппы.Тип = "Шаг" Или ЭлементГруппы.ДопТип = "Условие"
				или ЭлементГруппы.ДопТип = "Цикл" Тогда
			Для Каждого Шаг Из Параметры.Сценарий.Шаги Цикл
				Если ЭлементГруппы.ИдСтроки = Шаг.СтрокаШага Тогда
					Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(ЭлементГруппы, Параметры, ДопПараметры);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(СтрокаДереваГруппа, Параметры, ДопПараметры)

	ЭлементыГруппы = СтрокаДереваГруппа.ПолучитьЭлементы();

	Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
		Если ЭлементГруппы.Тип = "Шаг" 
				Или ЭлементГруппы.ДопТип = "Условие"
				Или ЭлементГруппы.ДопТип = "Цикл" Тогда
			Для Каждого Шаг Из Параметры.Сценарий.Шаги Цикл
				Если ЭлементГруппы.ИдСтроки = Шаг.СтрокаШага Тогда
					Шаг.Вставить("ВнутриГруппыКотораяРаботаетКакОдинШаг", Истина);
					Шаг.Вставить("ПервыйВГруппеШагов", Ложь);
					Шаг.Вставить("ПоследнийВГруппеШагов", Ложь);

					Если НЕ ДопПараметры.НашлиПервыйШаг И ЭтотШагНеНужноИгнорировать(Шаг) Тогда
						Шаг.Вставить("ПервыйВГруппеШагов", Истина);
						Шаг.Вставить("ТекстИнструкция", ДопПараметры.ТекстШагаГруппы);
						Шаг.Вставить("МасштабироватьВВидео", ДопПараметры.МасштабироватьВВидео);
						ДопПараметры.НашлиПервыйШаг = Истина;
					ИначеЕсли НЕ ДопПараметры.НашлиПервыйШаг Тогда
						Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);
						Шаг.Вставить("ВнутриГруппыКотораяРаботаетКакОдинШаг", Ложь);
					КонецЕсли;

					Если ЭтотШагНеНужноИгнорировать(Шаг) Тогда
						ДопПараметры.ВременныйШаг = Шаг;
					Иначе
						Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);
						Шаг.Вставить("ВнутриГруппыКотораяРаботаетКакОдинШаг", Ложь);
					КонецЕсли;

					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ДопПараметры.Уровень = ДопПараметры.Уровень + 1;
		ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(ЭлементГруппы, Параметры, ДопПараметры);
		ДопПараметры.Уровень = ДопПараметры.Уровень - 1;
	КонецЦикла;

	Если ДопПараметры.Уровень = 0 Тогда
		ДопПараметры.ВременныйШаг.Вставить("ПоследнийВГруппеШагов", Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЭтотШагНеНужноИгнорировать(Шаг)

	Если Шаг.МассивКомментариевШага.Найти("#[autodoc.ignorestep]") <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаКлиенте
Функция CSSСтили()

	Cтили = Новый ТекстовыйДокумент();
	Cтили.ДобавитьСтроку("<style>");

	// Alert
	СтрокаСтиля(".alert{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}", Cтили);
	СтрокаСтиля(".alert-primary{color:#004085;background-color:#cce5ff;border-color:#b8daff}", Cтили);
	СтрокаСтиля(".alert-secondary{color:#383d41;background-color:#e2e3e5;border-color:#d6d8db}", Cтили);
	СтрокаСтиля(".alert-success{color:#155724;background-color:#d4edda;border-color:#c3e6cb}", Cтили);
	СтрокаСтиля(".alert-info{color:#0c5460;background-color:#d1ecf1;border-color:#bee5eb}", Cтили);
	СтрокаСтиля(".alert-warning{color:#856404;background-color:#fff3cd;border-color:#ffeeba}", Cтили);
	СтрокаСтиля(".alert-danger{color:#721c24;background-color:#f8d7da;border-color:#f5c6cb}", Cтили);
	СтрокаСтиля(".alert-light{color:#818182;background-color:#fefefe;border-color:#fdfdfe}", Cтили);
	СтрокаСтиля(".alert-dark{color:#1b1e21;background-color:#d6d8d9;border-color:#c6c8ca}", Cтили);

//	СтрокаСтиля(".alert{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}", Cтили);
//	СтрокаСтиля(".alert{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}", Cтили);
//	СтрокаСтиля(".alert{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}", Cтили);

	Cтили.ДобавитьСтроку("</style>");

	Возврат Cтили.ПолучитьТекст();

КонецФункции

&НаКлиенте
Функция ПолучитьОтметкуВремениДляИмениФайла()

	ТекДат = Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	ТекМилиСек = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Стр = ТекДат + "_" + ТекМилиСек;

	Стр = СтрЗаменить(Стр, ".", "");
	Стр = СтрЗаменить(Стр, ",", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, "/", "");
	Стр = СтрЗаменить(Стр, "\", "");
	Стр = СтрЗаменить(Стр, Символы.НПП, "");

	Возврат Стр;

КонецФункции	

&НаКлиенте
Процедура ПроцедураПереместитьФайл(Знач Стр1, Знач Стр2)
	УправляемаяФорма.ПереместитьФайлКомандаСистемы(Стр1, Стр2);
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьФайлВМассив(ИмяФайла)

	Массив = Новый Массив;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		Массив.Добавить(Стр);
	КонецЦикла;

	Текст.Закрыть();

	Возврат Массив;

КонецФункции	

#КонецОбласти
#КонецОбласти
